apiVersion: apps/v1
kind: Deployment
metadata:
  name: dagger-engine
  annotations:
    karpenter.sh/do-not-disrupt: "true"
  labels:
    app.kubernetes.io/name: dagger-engine
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dagger-engine
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dagger-engine
    spec:
      securityContext:
        runAsUser: 0
        runAsGroup: 1001
        fsGroup: 1001
        fsGroupChangePolicy: "OnRootMismatch"
      serviceAccountName: default
      containers:
        - name: dagger-engine
          image: registry.dagger.io/engine:v0.15.2
          imagePullPolicy: IfNotPresent
          args:
            - --addr
            - tcp://0.0.0.0:8080
            - --oci-max-parallelism
            - num-cpu
          ports:
            - containerPort: 8080
          securityContext:
            privileged: true
            capabilities:
              add:
                - ALL
          resources:
            limits:
              memory: 8Gi
              ephemeral-storage: 100Gi
            requests:
              cpu: 4
              memory: 8Gi
              ephemeral-storage: 100Gi
          readinessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
            failureThreshold: 3
          volumeMounts:
            - name: dagger-engine-config
              mountPath: /etc/dagger/engine.toml
              subPath: engine.toml
            - name: varlibdagger
              mountPath: /var/lib/dagger
            - name: varrundagger
              mountPath: /var/run/buildkit
      terminationGracePeriodSeconds: 300
      volumes:
        - name: dagger-engine-config
          configMap:
            name: dagger-engine
            items:
              - key: engine.toml
                path: engine.toml
        - name: varlibdagger
          ephemeral:
            volumeClaimTemplate:
              spec:
                accessModes: ["ReadWriteOnce"]
                resources:
                  requests:
                    storage: 50Gi
        - name: varrundagger
          ephemeral:
            volumeClaimTemplate:
              spec:
                accessModes: ["ReadWriteOnce"]
                resources:
                  requests:
                    storage: 50Gi
      tolerations:
        - effect: NoSchedule
          key: ogenki/io
          operator: Exists
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: karpenter.sh/nodepool
                    operator: In
                    values:
                      - io
              # - matchExpressions:
              #     - key: karpenter.sh/capacity-type
              #       operator: In
              #       values:
              #         - on-demand
