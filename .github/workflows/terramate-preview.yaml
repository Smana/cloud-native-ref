name: Terraform Preview

on:
  pull_request:
    branches:
      - main

env:
  # Network module
  TF_VAR_tailscale.api_key: ${{ secrets.TAILSCALE_API_KEY }}

  # EKS module
  TF_VAR_flux_git_ref: "refs/heads/${{ github.head_ref }}"

  # Network variables
  PRIVATE_DOMAIN_NAME: priv.cloud.ogenki.io
  TAILSCALE_SUBNET_ROUTER_NAME: ogenki
  TAILSCALE_TAILNET: smainklh@gmail.com

  # Identity provider variables
  ZITADEL_CLIENT_ID: ${{ secrets.ZITADEL_CLIENT_ID }}
  ZITADEL_ISSUER_URL: https://auth.cloud.ogenki.io

jobs:
  preview:
    name: Plan Terraform changes in changed stacks
    runs-on: ubuntu-latest

#     permissions:
#       id-token: write
#       contents: read
#       pull-requests: write
#       checks: read

    steps:
      ### Check out the code

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      ### Install tooling

      - name: Install Terramate
        uses: terramate-io/terramate-action@v2

      - name: Install asdf
        uses: asdf-vm/actions/setup@v3
        with:
          asdf_branch: v0.15.0

      - name: Install Terraform with asdf
        run: |
          asdf plugin add terraform
          asdf install terraform

      - name: Install OpenTofu with asdf
        run: |
          asdf plugin add opentofu
          asdf install opentofu

      ### Linting

#       - name: Check Terramate formatting
#         run: terramate fmt --check

      - name: Check Terraform formatting
        run: terraform fmt -recursive -check -diff

      ### Check for changed stacks

      - name: List changed stacks
        id: list-changed
        run: terramate list --changed

      ### Configure cloud credentials
      # We should assume an IAM role for production cases
      - name: Configure AWS credentials
        if: steps.list-changed.outputs.stdout
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS credentials
        if: steps.list-changed.outputs.stdout
        run: aws sts get-caller-identity

      - name: Create variables.tfvars files
        if: steps.list-changed.outputs.stdout
        run: |
          # Create network variables.tfvars
          cat > opentofu/network/variables.tfvars << EOF
            env                 = "dev"
            region              = "${{ env.AWS_REGION }}"
            private_domain_name = "${{ env.PRIVATE_DOMAIN_NAME }}"

            tailscale = {
              subnet_router_name         = "${{ env.TAILSCALE_SUBNET_ROUTER_NAME }}"
              tailnet                    = "${{ env.TAILSCALE_TAILNET }}"
              # This is a sensitive value
              api_key                    = "${{ secrets.TAILSCALE_API_KEY }}"
              prometheus_enabled         = true
              ssm_enabled                = true
              overwrite_existing_content = true
            }

#             tags = {
#               project = "cloud-native-ref"
#               owner   = "Smana"
#             }
#           EOF

          # Create EKS variables.tfvars
          cat > opentofu/eks/variables.tfvars << EOF
            env          = "dev"
            cluster_name = "${{ env.EKS_CLUSTER_NAME }}"

            flux_sync_repository_url = "https://github.com/Smana/cloud-native-ref.git"
            flux_git_ref             = "refs/heads/${{ github.head_ref }}"

            tags = {
              GithubRepo = "cloud-native-ref"
              GithubOrg  = "Smana"
            }

            enable_ssm = true

            karpenter_limits = {
              "default" = {
                cpu    = "20"
                memory = "64Gi"
              }
              "io" = {
                cpu    = "20"
                memory = "64Gi"
              }
            }

            cluster_identity_providers = {
              zitadel = {
                client_id      = "${{ env.ZITADEL_CLIENT_ID }}"
                issuer_url     = "${{ env.ZITADEL_ISSUER_URL }}"
                username_claim = "email"
                groups_claim   = "groups"
              }
            }
          EOF

      ### Run the Terraform preview via Terramate in each changed stack

      - name: Run Terraform init in all changed stacks
        if: steps.list-changed.outputs.stdout
        run: |
          terramate script run \
            --changed \
            --parallel 1 \
            init
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Plan Terraform changes in changed stacks
        if: steps.list-changed.outputs.stdout
        run: |
          terramate script run \
            --changed \
            --parallel 2 \
            --continue-on-error \
            -- \
            preview
        env:
          GITHUB_TOKEN: ${{ github.token }}
