apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
spec:
  releaseName: kube-prometheus-stack
  chart:
    spec:
      chart: kube-prometheus-stack
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
      version: "62.0.0"
  interval: 10m0s
  timeout: 30m
  install:
    remediation:
      retries: 3
    createNamespace: true
  upgrade:
    crds: CreateReplace
  values:
    global:
      rbac:
        createAggregateClusterRoles: true
    crds:
      enabled: false

    commonLabels:
      prometheus-instance: main

    alertmanager:
      enabled: false
    grafana:
      serviceMonitor:
        labels:
          prometheus-instance: main
      admin:
        existingSecret: "kube-prometheus-stack-grafana-admin"
      defaultDashboardsEnabled: true
      defaultDashboardsTimezone: Europe/Paris
      resources:
        requests:
          cpu: 150m
          memory: 256Mi
        limits:
          cpu: 600m
          memory: 256Mi
      datasources:
        datasources.yaml:
          apiVersion: 1
          datasources:
            - name: Loki
              type: loki
              url: http://loki-gateway
              jsonData:
                httpHeaderName1: "X-Scope-OrgID"
              secureJsonData:
                httpHeaderValue1: "1"
      sidecar:
        dashboards:
          enabled: true
          searchNamespace: ALL
        datasources:
          defaultDatasourceEnabled: true
          enabled: true
          isDefaultDatasource: false
      dashboardProviders:
        dashboardproviders.yaml:
          apiVersion: 1
          providers:
            - name: "flux"
              orgId: 1
              folder: "Flux"
              type: file
              disableDeletion: true
              editable: true
              options:
                path: /var/lib/grafana/dashboards/flux
            - name: "karpenter"
              orgId: 1
              folder: "Karpenter"
              type: file
              disableDeletion: true
              editable: true
              options:
                path: /var/lib/grafana/dashboards/karpenter
            - name: "loki"
              orgId: 1
              folder: "Loki"
              type: file
              disableDeletion: true
              editable: true
              options:
                path: /var/lib/grafana/dashboards/loki
            - name: "views"
              orgId: 1
              folder: "Views"
              type: file
              disableDeletion: true
              editable: true
              options:
                path: /var/lib/grafana/dashboards/views
      dashboards:
        flux:
          flux-controlplane:
            url: https://raw.githubusercontent.com/fluxcd/flux2-monitoring-example/main/monitoring/configs/dashboards/control-plane.json
            datasource: Prometheus
          flux-cluster:
            url: https://raw.githubusercontent.com/fluxcd/flux2-monitoring-example/main/monitoring/configs/dashboards/cluster.json
            datasource: Prometheus
          flux-logs:
            url: https://raw.githubusercontent.com/fluxcd/flux2-monitoring-example/main/monitoring/configs/dashboards/logs.json
            datasource: Loki
        karpenter:
          karpenter-capacity:
            url: https://karpenter.sh/v0.34/getting-started/getting-started-with-karpenter/karpenter-capacity-dashboard.json
            datasource: Prometheus
          karpenter-performance:
            url: https://karpenter.sh/v0.34/getting-started/getting-started-with-karpenter/karpenter-performance-dashboard.json
            datasource: Prometheus
        # Dashboards from https://github.com/dotdc/grafana-dashboards-kubernetes
        views:
          k8s-views-global:
            url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-global.json
            datasource: Prometheus
          k8s-views-namespaces:
            url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-namespaces.json
            datasource: Prometheus
          k8s-views-nodes:
            url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-nodes.json
            datasource: Prometheus
          k8s-views-pods:
            url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-pods.json
            datasource: Prometheus
        loki:
          quick-search-logs:
            datasource: Loki
            url: https://raw.githubusercontent.com/Smana/cloud-native-ref/main/observability/base/kube-prometheus-stack/grafana-dashboards/quick-search-logs.json
    kube-state-metrics:
      prometheusScrape: false # disable scrape annotation as we use servicemonitor
      prometheus:
        monitor:
          additionalLabels:
            prometheus-instance: main
      metricLabelsAllowlist: jobs=[id]
    kubeApiServer: # this works on eks but we dont use theses (very verboses) metrics
      enabled: false
    kubeControllerManager:
      enabled: false
    kubeEtcd:
      enabled: false
    kubeProxy:
      enabled: false
    kubeScheduler:
      enabled: false
    prometheus-node-exporter:
      service:
        annotations:
          prometheus.io/scrape: "false"
      prometheus:
        monitor:
          additionalLabels:
            prometheus-instance: main
    prometheusOperator:
      resources:
        limits:
          memory: 400Mi
        requests:
          cpu: 100m
          memory: 400Mi
    prometheus:
      configReloaderCpu: 300m
      prometheusSpec:
        podMonitorSelector:
          matchLabels:
            prometheus-instance: main
        probeSelector:
          matchLabels:
            prometheus-instance: main
        ruleSelector:
          matchLabels:
            prometheus-instance: main
        scrapeConfigSelector:
          matchLabels:
            prometheus-instance: main
        serviceMonitorSelector:
          matchLabels:
            prometheus-instance: main
        resources:
          requests:
            cpu: 200m
            memory: 1Gi
          limits:
            cpu: 500m
            memory: 1Gi
    kubelet:
      servicemonitor:
        additionalLabels:
          prometheus-instance: main
