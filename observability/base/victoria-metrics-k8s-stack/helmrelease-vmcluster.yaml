apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: victoria-metrics-k8s-stack
  namespace: observability
spec:
  releaseName: victoria-metrics-k8s-stack
  chart:
    spec:
      chart: victoria-metrics-k8s-stack
      sourceRef:
        kind: HelmRepository
        name: victoria-metrics
        namespace: observability
      version: "0.25.10"
  interval: 4m0s
  timeout: 30m
  install:
    remediation:
      retries: 3
  values:
    tenant: "0"

    defaultRules:
      rule:
        spec:
          annotations:
            dashboard: "https://grafana.priv.${domain_name}/dashboards"

    grafanaOperatorDashboardsFormat:
      enabled: true
      instanceSelector:
        matchLabels:
          dashboards: "grafana"
      allowCrossNamespaceImport: false

    vmagent:
      externalLabels:
        cluster: "${cluster_name}"

    vmsingle:
      enabled: false

    vmcluster:
      enabled: true
      spec:
        retentionPeriod: "10d"
        replicationFactor: 2
        vmstorage:
          storage:
            volumeClaimTemplate:
              storageClassName: "gp3"
              spec:
                resources:
                  requests:
                    storage: 10Gi
          resources:
            limits:
              cpu: "1"
              memory: 1500Mi
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: "app.kubernetes.io/name"
                        operator: In
                        values:
                          - "vmstorage"
                  topologyKey: "kubernetes.io/hostname"
          topologySpreadConstraints:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: vmstorage
              maxSkew: 1
              topologyKey: topology.kubernetes.io/zone
              whenUnsatisfiable: ScheduleAnyway
        vmselect:
          storage:
            volumeClaimTemplate:
              storageClassName: "gp3"
              spec:
                resources:
                  requests:
                    storage: 2Gi
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: "app.kubernetes.io/name"
                        operator: In
                        values:
                          - "vmselect"
                  topologyKey: "kubernetes.io/hostname"
          topologySpreadConstraints:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: vmselect
              maxSkew: 1
              topologyKey: topology.kubernetes.io/zone
              whenUnsatisfiable: ScheduleAnyway
          resources:
            limits:
              cpu: "1"
              memory: "1000Mi"
            requests:
              cpu: "0.5"
              memory: "500Mi"
        vminsert:
          extraArgs:
            maxLabelsPerTimeseries: "30"
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: "app.kubernetes.io/name"
                        operator: In
                        values:
                          - "vminsert"
                  topologyKey: "kubernetes.io/hostname"
          topologySpreadConstraints:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: vminsert
              maxSkew: 1
              topologyKey: topology.kubernetes.io/zone
              whenUnsatisfiable: ScheduleAnyway
          resources:
            limits:
              cpu: "1"
              memory: 1000Mi
            requests:
              cpu: "0.5"
              memory: "500Mi"

    alertmanager:
      enabled: true

      spec:
        externalURL: "https://vmalertmanager-${cluster_name}.priv.${domain_name}"
        secrets:
          - "victoria-metrics-k8s-stack-alertmanager-slack-app"

      config:
        global:
          slack_api_url: "https://slack.com/api/chat.postMessage"
          http_config:
            authorization:
              credentials_file: /etc/vm/secrets/victoria-metrics-k8s-stack-alertmanager-slack-app/token

        route:
          receiver: "slack-monitoring"
          routes:
            - matchers:
                - alertname =~ "InfoInhibitor|Watchdog|KubeCPUOvercommit"
              receiver: "blackhole"
            - matchers:
                - severity=~"info|warning|critical"
              receiver: slack-monitoring
              continue: true

        receivers:
          - name: "blackhole"
          - name: "slack-monitoring"
            slack_configs:
              - channel: "#alerts"
                send_resolved: true
                title: '{{ template "slack.monzo.title" . }}'
                icon_emoji: '{{ template "slack.monzo.icon_emoji" . }}'
                color: '{{ template "slack.monzo.color" . }}'
                text: '{{ template "slack.monzo.text" . }}'
                actions:
                  - type: button
                    text: "Runbook :green_book:"
                    url: "{{ (index .Alerts 0).Annotations.runbook_url }}"
                  - type: button
                    text: "Query :mag:"
                    url: "{{ (index .Alerts 0).GeneratorURL }}"
                  - type: button
                    text: "Dashboard :grafana:"
                    url: "{{ (index .Alerts 0).Annotations.dashboard }}"
                  - type: button
                    text: "Silence :no_bell:"
                    url: '{{ template "__alert_silence_link" . }}'
                  - type: button
                    text: '{{ template "slack.monzo.link_button_text" . }}'
                    url: "{{ .CommonAnnotations.link_url }}"

    grafana:
      admin:
        existingSecret: "victoria-metrics-k8s-stack-grafana-admin"
      sidecar:
        datasources:
          enabled: true
          initDatasources: true
        dashboards:
          enabled: true
          multicluster: false
      dashboardProviders:
        dashboardproviders.yaml:
          apiVersion: 1
          providers: []
      dashboards: {}
      extraInitContainers:
        - name: "load-vm-ds-plugin"
          image: "curlimages/curl:8.9.1"
          command: ["/bin/sh"]
          workingDir: "/var/lib/grafana"
          securityContext:
            runAsUser: 472
            runAsNonRoot: true
            runAsGroup: 472
          args:
            - "-c"
            - |
              set -ex
              mkdir -p /var/lib/grafana/plugins/
              ver=$(curl -s https://api.github.com/repos/VictoriaMetrics/victoriametrics-datasource/releases/latest | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+' | head -1)
              curl -L https://github.com/VictoriaMetrics/victoriametrics-datasource/releases/download/$ver/victoriametrics-datasource-$ver.tar.gz -o /var/lib/grafana/plugins/vm-plugin.tar.gz
              tar -xf /var/lib/grafana/plugins/vm-plugin.tar.gz -C /var/lib/grafana/plugins/
              rm /var/lib/grafana/plugins/vm-plugin.tar.gz
          volumeMounts:
            # For grafana-operator users, change `name: storage` to `name: grafana-data`
            - name: storage
              mountPath: /var/lib/grafana

    # Do not scrape controlplane components as it is a managed service on EKS
    kubeApiServer:
      enabled: false
    kubeControllerManager:
      enabled: false
    kubeEtcd:
      enabled: false
    kubeScheduler:
      enabled: false
    kubeProxy:
      enabled: false

    # Deployed with all the other CRDs, flux kustomization
    crds:
      enabled: false
